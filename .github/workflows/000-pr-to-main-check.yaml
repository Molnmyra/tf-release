# Triggers: Manual on chosen environment

name: "[PR] Format, Validate and Plan DEV"
concurrency: ${{ github.workflow }}
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:    
      - main
    paths:
      - '**.tf'

env:
  ARM_USE_AZUREAD: "true"

jobs:
  variables:
    name: Variables
    runs-on: ubuntu-latest
    outputs:
      GITHUB_SHA_SHORT: ${{ steps.variables.outputs.GITHUB_SHA_SHORT }}
      GITHUB_BRANCH_SLUG: ${{ steps.variables.outputs.GITHUB_BRANCH_SLUG }}
      GITHUB_REPO_NAME: ${{ steps.variables.outputs.GITHUB_REPO_NAME }}
      GITHUB_ENVIRONMENT: ${{ steps.variables.outputs.GITHUB_ENVIRONMENT }}
    steps:
      - uses: actions/github-script@v6
        id: variables
        with:
          script: |
            console.log(context)
            const sha = context.sha.substring(0,7)
            const branch = context.ref.split('/').pop()
            const repo_name = context.payload.repository.full_name.split('/').pop().toLowerCase()
            if (context.ref == 'refs/heads/main' && context.eventName == 'push') {
              const github_environment = 'dev-apply'
            } else {
              const github_environment = 'dev-plan'
            }
            core.setOutput('GITHUB_SHA_SHORT', sha)
            core.setOutput('GITHUB_BRANCH_SLUG', branch)
            core.setOutput('GITHUB_REPO_NAME', repo_name)
            core.setOutput('GITHUB_ENVIRONMENT', github_environment)
  terraform:
    name: "Terraform Validate and Plan"
    needs: [ variables ]
    runs-on: ubuntu-latest
    concurrency: terraform-dev
    environment: 
      name: ${{ needs.variables.outputs.GITHUB_ENVIRONMENT }}
    
    env:
      # Target subscription
      ARM_SUBSCRIPTION_ID: ${{ secrets.TF_ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.TF_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.TF_ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.TF_ARM_TENANT_ID }}  # always same!

      # Backend terraform state
      TF_BACKEND_RG_NAME: ${{ secrets.DEMO_PREFIX }}-rg-dev-tfstate
      TF_BACKEND_STGACCT_NAME: ${{ secrets.DEMO_PREFIX }}devtfstate
      TF_BACKEND_CONTAINER_NAME: tfstate
      TF_BACKEND_KEY: ${{ needs.variables.outputs.GITHUB_REPO_NAME }}/dev.tfstate

      # Env vars accessible inside Terraform files
      TF_VAR_azure_environment: dev
      TF_VAR_subscription_id: ${{ secrets.TF_ARM_SUBSCRIPTION_ID }}
      TF_VAR_github_sha: ${{ needs.variables.outputs.GITHUB_SHA_SHORT }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Terraform Format
        id: fmt
        if: github.event_name == 'pull_request'
        run: terraform fmt -check -no-color -diff

      - name: Terraform Init
        id: init
        run: |
          terraform init -input=false -upgrade \
            -backend-config="resource_group_name=${TF_BACKEND_RG_NAME}" \
            -backend-config="storage_account_name=${TF_BACKEND_STGACCT_NAME}" \
            -backend-config="container_name=${TF_BACKEND_CONTAINER_NAME}" \
            -backend-config="key=${TF_BACKEND_KEY}"
        
      - name: Terraform Validate
        id: validate
        if: github.event_name == 'pull_request'
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -lock=false

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve